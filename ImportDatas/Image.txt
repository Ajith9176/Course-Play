@TC-001_Image
Scenario: User Create new module image
Given user click on module Authoring  and  create module button to create image module
And user select image
And user Enter Module Code  And  Module Title in basic details for Image module
And user Select Module Thumbnail and upload for module text in basic details for Image module
And user Enter Module Short Description  and  Module Long Description in basic details for Image module
And user Select image in basic details 
And user Enter Module Content and Click Skills to select Skill in basic details for Image module
And user Enter Maximum User Enrollments  and Expiration Date for Advance settings in basic details for Image module
And user Enter Maximum Number of Attempts  and  Minimum Time Limit for Advance settings in basic details for Image module
And user click Save button for Image module
And user click Save and Publish button for Image module
And user click popup Button for Image module

@TC-002_Image
Scenario: User To Add new image Module without adding basic details
Given User Click Module Authoring and Create Module button for image module
And User Click image Module 
And User Click Save button without filling image Module
And User Verify the Module Code and Name is required in image Module
And user verify the image content is required
And User Verify the Short and Long Description is required in image Module

@TC-003_Image
Scenario:  User To Add new image Module with adding Special Symbols in  basic details
Given User Click Module Authoring and  create Module button by Adding special characters in Basic details
And User Click image module 
And user upload image content 
And User Click Save button with filling image Module by special characters
And User Verify the Module Code and Name is required in image module


Stepdefnition

 @Given("^user click on module Authoring  and  create module button to create image module$")
	 public void user_click_on_module_Authoring_and_create_module_button_to_create_image_module() throws Throwable {
		 elementClick(pm.getImage().getModule());
	     Thread.sleep(2000);
	     elementClick(pm.getImage().getCreatemodule());
	 }

	 @Given("^user select image$")
	 public void user_select_image() throws Throwable {
	    elementClick(pm.getImage().getImage());
	 }

	 @Given("^user Enter Module Code  And  Module Title in basic details for Image module$")
	 public void user_Enter_Module_Code_And_Module_Title_in_basic_details_for_Image_module() throws Throwable {
	    inputValuestoElement(pm.getImage().getModulecode(), BaseClass.getValuesfromExcel("Image", 1, 1));
	    Thread.sleep(2000);
	    inputValuestoElement(pm.getImage().getModuletitle(), BaseClass.getValuesfromExcel("Image", 1, 2));
	 }

	 @Given("^user Select Module Thumbnail and upload for module text in basic details for Image module$")
	 public void user_Select_Module_Thumbnail_and_upload_for_module_text_in_basic_details_for_Image_module() throws Throwable {
	    sendText(pm.getImage().getThumbnail(), BaseClass.getValuesfromExcel("Image", 1, 3));
	    Thread.sleep(2000);
	    elementClick(pm.getImage().getThumbnailuploadbutton());
	    Thread.sleep(2000);
	    elementClick(pm.getImage().getPopup1());
	    sendText(pm.getImage().getDownloadablemedia(), BaseClass.getValuesfromExcel("Image", 1, 4));
	    Thread.sleep(2000);
	    elementClick(pm.getImage().getDownloadablemediabutton());
	    Thread.sleep(6000);
	    for (int i = 0; i <=10; i++) {
	 		pm.getVideo().getScrolldown().sendKeys(Keys.ARROW_DOWN);	
	 	}
	 }

	 @Given("^user Enter Module Short Description  and  Module Long Description in basic details for Image module$")
	 public void user_Enter_Module_Short_Description_and_Module_Long_Description_in_basic_details_for_Image_module() throws Throwable {
		 inputValuestoElement(pm.getImage().getShortdescription(), BaseClass.getValuesfromExcel("Image", 1, 8));
		 Thread.sleep(2000);
		elementinputValuesusingActions(pm.getImage().getLongdescription(), BaseClass.getValuesfromExcel("Image", 1, 9));
	 }

	 @Given("^user Select image in basic details$")
	 public void user_Select_image_in_basic_details() throws Throwable {
	   sendText(pm.getImage().getWebimageupload(), BaseClass.getValuesfromExcel("Image", 1, 7));
	   Thread.sleep(2000);
	   elementClick(pm.getImage().getWebimageuploadbutton());
	   Thread.sleep(20000);
	 }

	 @Given("^user Enter Module Content and Click Skills to select Skill in basic details for Image module$")
	 public void user_Enter_Module_Content_and_Click_Skills_to_select_Skill_in_basic_details_for_Image_module() throws Throwable {
	     elementClick(pm.getImage().getSkilltab());
	     Thread.sleep(2000);
	     elementClick(pm.getImage().getSkillselect());
	     
	 }

	 @Given("^user Enter Maximum User Enrollments  and Expiration Date for Advance settings in basic details for Image module$")
	 public void user_Enter_Maximum_User_Enrollments_and_Expiration_Date_for_Advance_settings_in_basic_details_for_Image_module() throws Throwable {
	    inputValuestoElement(pm.getImage().getMaximumenroll(), BaseClass.getValuesfromExcel("Image", 1, 12));
	    Thread.sleep(2000);
		 String date = BaseClass.getValuesfromExcel("Image", 1, 13);
			String s1 = date.substring(0, 4);
			String s2 =date.substring(4, 6);
			String s3 = date.substring(6);
			String dates = s1 + "-" + s2 + "-" + s3;
			inputValuestoElement1(pm.getImage().getExpirationdate(),dates);
	    
	    
	 }

	 @Given("^user Enter Maximum Number of Attempts  and  Minimum Time Limit for Advance settings in basic details for Image module$")
	 public void user_Enter_Maximum_Number_of_Attempts_and_Minimum_Time_Limit_for_Advance_settings_in_basic_details_for_Image_module() throws Throwable {
	     inputValuestoElement(pm.getImage().getMaximumattempt(), BaseClass.getValuesfromExcel("Image", 1, 15));
	     Thread.sleep(2000);
	     inputValuestoElement(pm.getImage().getMinimumtime(), BaseClass.getValuesfromExcel("Image", 1, 14));
	     
	 }

	 @Given("^user click Save button for Image module$")
	 public void user_click_Save_button_for_Image_module() throws Throwable {
	    elementClick(pm.getImage().getSave());
	    Thread.sleep(2000);
	    elementClick(pm.getImage().getSave1());
	 }

	 @Given("^user click Save and Publish button for Image module$")
	 public void user_click_Save_and_Publish_button_for_Image_module() throws Throwable {
		 String publish = BaseClass.getValuesfromExcel("Image", 1, 17);
		  if (publish.equalsIgnoreCase("Yes")) {
				elementClick(pm.getImage().getSavepublish());
				simpleAlert();
			}else if (publish.equalsIgnoreCase("No")) {
				elementClick(pm.getImage().getModule());
				
			}
	 }

	 @Given("^user click popup Button for Image module$")
	 public void user_click_popup_Button_for_Image_module() throws Throwable {
		 Thread.sleep(3000);
	    //simpleAlert();
	 }
//TC-001_Image
	 @Given("^User Click Module Authoring and Create Module button for image module$")
	 public void user_Click_Module_Authoring_and_Create_Module_button_for_image_module() throws Throwable {
		 elementClick(pm.getImage().getModule());
	     Thread.sleep(2000);
	     elementClick(pm.getImage().getCreatemodule());
	 }

	 @Given("^User Click image Module$")
	 public void user_Click_image_Module() throws Throwable {
		 elementClick(pm.getImage().getImage());
		 Thread.sleep(3000);
		    for (int i = 0; i <=20; i++) {
		 		pm.getImage().getScrolldown().sendKeys(Keys.ARROW_DOWN);	
		 	}
		 
	     	 }

	 @Given("^User Click Save button without filling image Module$")
	 public void user_Click_Save_button_without_filling_image_Module() throws Throwable {
	    elementClick(pm.getImage().getSave());
	    Thread.sleep(3000);
	    for (int i = 0; i <=20; i++) {
	 		pm.getImage().getScrolldown().sendKeys(Keys.ARROW_UP);	
	 	}
	    
		 
	 }

	 @Given("^User Verify the Module Code and Name is required in image Module$")
	 public void user_Verify_the_Module_Code_and_Name_is_required_in_image_Module() throws Throwable {
	    elementDisplayed(pm.getImage().getModulecodeerror());
	    Thread.sleep(2000);
	    elementDisplayed(pm.getImage().getModuletitleerror());
	 }

	 @Given("^user verify the image content is required$")
	 public void user_verify_the_image_content_is_required() throws Throwable {
	   elementDisplayed(pm.getImage().getWebpageerror());
	   Thread.sleep(3000);
	    for (int i = 0; i <=10; i++) {
	 		pm.getVideo().getScrolldown().sendKeys(Keys.ARROW_DOWN);	
	 	}
	 }

	 @Given("^User Verify the Short and Long Description is required in image Module$")
	 public void user_Verify_the_Short_and_Long_Description_is_required_in_image_Module() throws Throwable {
		 elementDisplayed(pm.getImage().getShortdescriptionerror());
		 Thread.sleep(2000);
		 elementDisplayed(pm.getImage().getLongdescriptionerror());
		    
	 }
//TC-002_image

	 @Given("^User Click Module Authoring and  create Module button by Adding special characters in Basic details$")
	 public void user_Click_Module_Authoring_and_create_Module_button_by_Adding_special_characters_in_Basic_details() throws Throwable {
		 elementClick(pm.getImage().getModule());
	     Thread.sleep(2000);
	     elementClick(pm.getImage().getCreatemodule());
	 }

	 @Given("^User Click image module$")
	 public void user_Click_iamge_module() throws Throwable {
		 elementClick(pm.getImage().getImage());
		 Thread.sleep(3000);
		    for (int i = 0; i <=5; i++) {
		 		pm.getImage().getScrolldown().sendKeys(Keys.ARROW_DOWN);	
		 	}
	 }

	 @Given("^user upload image content$")
	 public void user_upload_image_content() throws Throwable {
		 sendText(pm.getImage().getWebimageupload(), BaseClass.getValuesfromExcel("Image", 1, 7));
		   Thread.sleep(2000);
		   elementClick(pm.getImage().getWebimageuploadbutton());
		   Thread.sleep(20000);
		   
		    for (int i = 0; i <=5; i++) {
		 		pm.getImage().getScrolldown().sendKeys(Keys.ARROW_UP);	
		 	}
	 }

	 @Given("^User Click Save button with filling image Module by special characters$")
	 public void user_Click_Save_button_with_filling_image_Module_by_special_characters() throws Throwable {
	    inputValuestoElement(pm.getImage().getModulecode(),BaseClass.getValuesfromExcel("Image", 2, 1));
	    Thread.sleep(2000);
	    inputValuestoElement(pm.getImage().getModuletitle(),BaseClass.getValuesfromExcel("Image", 2, 2));
	    Thread.sleep(2000);
	    inputValuestoElement(pm.getImage().getShortdescription(),BaseClass.getValuesfromExcel("Image", 2, 8));
	    Thread.sleep(2000);
	    elementinputValuesusingActions(pm.getImage().getLongdescription(),BaseClass.getValuesfromExcel("Image", 2, 9));
	    Thread.sleep(2000);
	    elementClick(pm.getImage().getSave());
	    
	 }

	 @Given("^User Verify the Module Code and Name is required in image module$")
	 public void user_Verify_the_Module_Code_and_Name_is_required_in_image_module() throws Throwable {
		  for (int i = 0; i <=20; i++) {
		 		pm.getImage().getScrolldown().sendKeys(Keys.ARROW_UP);	
		 	}
	    elementDisplayed(pm.getImage().getModulecodesymbolerror());
	    Thread.sleep(2000);
	    elementDisplayed(pm.getImage().getModuletitlesymbolerror());
	 }
